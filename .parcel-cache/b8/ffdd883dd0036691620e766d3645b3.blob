var helpers = require("../../../../../../usr/local/share/.config/yarn/global/node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  _parcelHelpers.defineInteropFlag(exports);
  var _react = require("react");
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  var _ButtonToNext = require("./ButtonToNext");
  var _ButtonToNextDefault = _parcelHelpers.interopDefault(_ButtonToNext);
  var _Displaycontent = require("./Displaycontent");
  var _DisplaycontentDefault = _parcelHelpers.interopDefault(_Displaycontent);
  var _jsxFileName = "/home/student/Coding/projects/country-quiz/component/Display.js", _s = $RefreshSig$();
  function Display({data, collectionItems, item1, fetchingData, count, setCount}) {
    _s();
    // States for checking whether the user's answer is correct or not and for checking whether the user has anwered or not..
    const [correct, setCorrect] = _react.useState(false);
    const [answered, setAnswered] = _react.useState(false);
    // Function for setting the condition whether the user has answered or not yet for setting the condition whether the answer is correct or incorrect.
    function handleClickButton(e) {
      setAnswered(true);
      if (e.target.dataset.value === data[item1].name) {
        // If the condition is true, add this "true" class and set this setCorrect function into true.
        e.target.classList.add("true_answer");
        setCorrect(true);
      } else if (e.target.dataset.value !== data[item1].name) {
        // If this condition is true, add this "responded" class and set this setCorrect function into false.
        e.target.classList.add("false_answer");
        setCorrect(false);
        // Finding the correct answer so that I can grab the button.
        const rightButton = data[collectionItems.find(item => {
          return data[item].name === data[item1].name;
        })].name;
        // Grab all of the buttons in order to find the correct one.
        const buttons = Array.from(document.querySelectorAll(".buttons"));
        // Finding the button by comparing the the value of the buttons and the correct value.
        const correctBtn = buttons.find(button => button.dataset.value == rightButton);
        // Adding this class on the rigth button when the user clicks the wrong button.
        correctBtn.classList.add("true_answer");
      }
    }
    return (
      /*#__PURE__*/_reactDefault.default.createElement(_reactDefault.default.Fragment, null, /*#__PURE__*/_reactDefault.default.createElement(_DisplaycontentDefault.default, {
        correct: correct,
        answered: answered,
        setAnswered: setAnswered,
        handleClickButton: handleClickButton,
        ButtonToNext: _ButtonToNextDefault.default,
        fetchingData: fetchingData,
        count: count,
        setCount: setCount,
        data: data,
        collectionItems: collectionItems,
        item1: item1,
        __self: this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 37,
          columnNumber: 13
        }
      }))
    );
  }
  _s(Display, "rcCFGfTLKzb8nDiCCvMDLNgudWs=");
  _c = Display;
  exports.default = Display;
  var _c;
  $RefreshReg$(_c, "Display");
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
